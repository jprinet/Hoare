pipelines:


  - name: npm_build
  # Global configuration section for the entire pipeline
    configuration:
      environmentVariables:
        readOnly:
          Version: 1.2.$run_number
    steps:
     
     
      - name: npm_prep
        type: NpmBuild
        configuration:
          npmArgs:   --no-progress --no-audit
          repositoryName: npm-demo
          sourceLocation: tutorial/step2-create-ui-pkg
          integrations:
            - name: Artifactory
          inputResources:
            - name: gitRepo_code
        execution:
          onStart:
            - pushd ${res_gitRepo_code_resourcePath}/tutorial/step2-create-ui-pkg
            - npm version ${Version} --no-git-tag-version
            - popd



      - name: npm_compile
        type: Bash
        configuration:
          inputSteps:
            - name: npm_prep
          integrations:
            - name: Artifactory
        execution:
          onStart:
            - export tempStateLocation="$step_tmp_dir/npmSourceState"
            # Restore file from previous step to current step
            - restore_run_files npmBuildInputGitRepo $tempStateLocation
            - pushd $tempStateLocation/tutorial/step2-create-ui-pkg
            - npm install shelljs
            - npm install 
            # Add files to npm pipeline target
            - add_run_files $tempStateLocation/. npmBuildInputGitRepo
            - popd
  
      - name: npm_publish
        type: NpmPublish
        configuration:
          repositoryName:       npm-demo
          integrations:
            - name: Artifactory
          inputSteps:
            - name: npm_compile
        execution:
          onStart:
            - export inputNpmBuildStepName="npm_prep"
            
#      - name: npm_scan_publish
#        type: PublishBuildInfo
#        configuration:
#          forceXrayScan:    True
#          inputSteps:
#            - name:    npm_publish
#          outputResources:
#            - name:     npmBuildInfo
#
#                                              #     Currently not in use
#      - name: npm_promote
#        type: PromoteBuild
#        configuration:
#          targetRepository:      team1-npm-staging-us
#          includeDependencies:   false
#          status:                Passed
#          comment:               Artifact passed Xray Scan
#          copy:                  true
#          inputResources:
#            - name:    npmBuildInfo    # optional
#              trigger: true
#          outputResources:
#            - name: promoted_npmBuild_Info
#

      - name: configDockerDaemon
        type: Bash
        configuration:
          affinityGroup: bldGroup
          runtime:
            type: host
          inputSteps:
            - name: npm_publish
        execution:
          onExecute:
            - >
              jq -n  '{ "graph": "/data", "mtu": 1460, "insecure-registries": ["demo-docker.artifactory-eu-jerome-0.soleng-emea-staging.jfrog.team:80"]}' | jq . > /etc/docker/daemon.json
            - sudo systemctl restart docker

      - name: npm_docker_build
        type: DockerBuild
        configuration:
          affinityGroup: bldGroup
          dockerFileLocation: tutorial/step2-create-ui-pkg
          dockerFileName: Dockerfile
          dockerImageName: "demo-docker.artifactory-eu-jerome-0.soleng-emea-staging.jfrog.team:80/npm-image"
          #dockerImageName: ${Fullimagename}  
          dockerImageTag: ${Version}
          inputSteps:
            - name: configDockerDaemon
          inputResources: 
            - name: gitRepo_code
            - name: npm_fileSpec
#            - name: promoted_npmBuild_Info
#              trigger: true         #     Currently not in use
          integrations:
            - name: Artifactory
        execution:
          onStart:
            - pushd ${res_gitRepo_code_resourcePath}/tutorial/step2-create-ui-pkg
            # Creating a Folder for the fileSpec Target
            - mkdir -p npm_results
            - popd
            - export domain=$(echo ${int_Artifactory_url} | awk -F[/:] '{print $4}' )
            - export Fullimagename="${domain}/docker-demo/npm-app"

          onSuccess:
            - echo "Congrats The Docker image was build"



      - name: Npm_docker_push
        type: DockerPush
        configuration:
          affinityGroup: bldGroup
          targetRepository: docker-demo
          autoPublishBuildInfo: true
          integrations:
            - name:  Artifactory
          inputSteps:
            - name: npm_docker_build
          outputResources:
            - name: docker_npmBuild_Info



      - name: npm_docker_scan
        type: XrayScan
        configuration:
#          waitUntilFinish: true
          inputResources:
            - name: docker_npmBuild_Info
              trigger: true
          outputResources: 
            - name: scanned_npm_dockerBuild_Info




      - name: npm_docker_promote
        type: PromoteBuild
        configuration:
          targetRepository:      docker-demo-prod-local
          includeDependencies:   true   
          status:                Passed
          comment:               Artifact passed Xray Scan
          copy:                  false
          inputResources:
            - name:    scanned_npm_dockerBuild_Info
              trigger: true       
          outputResources:
            - name: final_docker_npmBuild_Info 
